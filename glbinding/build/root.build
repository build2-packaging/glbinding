cxx.std = latest

# cxx.internal.scope = current

using cxx
using in

hxx{*}: extension = h
ixx{*}: extension = inl
cxx{*}: extension = cpp

# Assume headers are importable unless stated otherwise.
#
# hxx{*}: cxx.importable = true

# The test target for cross-testing (running tests under Wine, etc).
#
test.target = $cxx.target

# Configuration whether to use Boost's thread library.
#
config [bool] config.glbinding.use_boost_thread ?= false

# Configuration for setting which KHR header should be used.
#
config [bool] config.glbinding.use_packaged_khr ?= true

# Default Variables for Building and Exportation
#
default.intf_libs = # Empty
default.impl_libs = # Empty
#
default.export.poptions = # Empty
default.export.libs = # Empty

# Use Boost.Thread if configured.
#
if ($config.glbinding.use_boost_thread)
{
  import default.impl_libs += libboost-thread%lib{boost_thread}
  cxx.poptions += -DGLBINDING_USE_BOOST_THREAD
}

switch ($cxx.target.class)
{
  case 'linux'
  {
    default.export.poptions += -DSYSTEM_LINUX
    default.export.libs += -pthread -ldl
  }

  case 'macos'
  {
    default.export.poptions += -DSYSTEM_DARWIN
    default.export.libs += -pthread -ldl
  }

  case 'windows'
  {
    default.export.poptions += -DSYSTEM_WINDOWS
    if ($cxx.id == 'msvc')
    {
      cxx.poptions += /D_SCL_SECURE_NO_WARNINGS /D_CRT_SECURE_NO_WARNINGS
      cxx.coptions += /MP /W4 /wd4251 /wd4592 /wd4127 /Zm200 /Gw /GS- /GL /GF
    }
    elif ($cxx.target.system == 'mingw32')
    {
      # cxx.coptions +=
      # cxx.loptions +=
    }
  }
}

cxx.poptions =+ $default.export.poptions
cxx.libs += $default.export.libs
